<?php $_dld_color_title = Mage::helper('dailydeal')->getConfigSchemeColor(); ?>
<?php $_dld_color_coundown = Mage::helper('dailydeal')->getConfigCountdownColor(); ?>
<?php $_dld_color_lighight = Mage::helper('dailydeal')->getConfigHighlightColor(); ?>
<?php
function colourBrightnesstab($hex, $percent) {
    $hash = '';
    if (stristr($hex,'#')) {
        $hex = str_replace('#','',$hex);
        $hash = '#';
    }
    /// HEX TO RGB
    $rgb = array(hexdec(substr($hex,0,2)), hexdec(substr($hex,2,2)), hexdec(substr($hex,4,2)));
    //// CALCULATE
    for ($i=0; $i<3; $i++) {
        // See if brighter or darker
        if ($percent > 0) {
            // Lighter
            $rgb[$i] = round($rgb[$i] * $percent) + round(255 * (1-$percent));
        } else {
            // Darker
            $positivePercent = $percent - ($percent*2);
            $rgb[$i] = round($rgb[$i] * $positivePercent) + round(0 * (1-$positivePercent));
        }
        // In case rounding up causes us to go to 256
        if ($rgb[$i] > 255) {
            $rgb[$i] = 255;
        }
    }
    //// RBG to Hex
    $hex = '';
    for($i=0; $i < 3; $i++) {
        // Convert the decimal digit to hex
        $hexDigit = dechex($rgb[$i]);
        // Add a leading zero if necessary
        if(strlen($hexDigit) == 1) {
            $hexDigit = "0" . $hexDigit;
        }
        // Append to the hex string
        $hex .= $hexDigit;
    }
    return $hash.$hex;
}
?>


<div class="tab-deal">
    <ul id="tabs" class="tabs" >
        <li class="active featured">
            <a href="<?php echo Mage::getBaseUrl(); ?>">
                <span>Deal van de Dag</span>
            </a>
        </li>
        <li>
            <a href="<?php echo Mage::helper('dailydeal')->getUrlHttp('dailydeal/index'); ?>">
                <span>Alle Deals</span>
            </a>
        </li>
        <li class="past">
            <a href="<?php echo Mage::helper('dailydeal')->getUrlHttp('dailydeal/past'); ?>">
                <span>Gemiste Deals</span>
            </a>
        </li>
    </ul>
</div>

<?php
/**
 * Product list template
 *
 * @see Mage_Catalog_Block_Product_List
 */
?>
<?php
//$_activedealsCollection = $this->getActivedeals();
$_featuredCollection = $this->getDeals();
$_helper = $this->helper('catalog/output');
?>

<?php echo $this->getLayout()->createBlock('cms/block')->setBlockId('footer_abc')->toHtml(); ?>

<?php if (!$_featuredCollection->count()): ?>
    <p class="note-msg"><?php echo $this->__('There are no products matching the selection.') ?></p>
<?php else: ?>
    <div class="category-products responsive-list list-actdeals deals-block">

        <?php // List mode ?>

        <?php
        echo $this->getLayout()->createBlock('newsletter/subscribe')->setTemplate('newsletter/subscribe4.phtml')->toHtml();
        ?>

        <div style="clear:both"></div>

        <?php $_iterator = 0; ?>
        <ol class="products-list" id="products-list">
            <?php foreach ($_featuredCollection as $_activedeal): ?>
                <?php
                $dealqty = $_activedeal->getDealQty();
                $soldqty = $_activedeal->getSoldQty();


                $gmtcore = Mage::getSingleton('core/date')->getGmtOffset();
                $beforetime = Mage::getModel('core/date')->timestamp(time())-strtotime($_activedeal->getStartDateTime());//echo $beforetime;
                $aftertime = strtotime($_activedeal->getEndDateTime())- Mage::getModel('core/date')->timestamp(time());//echo $aftertime;

                if (($aftertime <= 0) || ($beforetime < 0)){
                    continue;
                }

                // display only one deal
                if ($_iterator >= 1 ){
                    continue;
                }

                $_product = Mage::getModel('catalog/product')->load($_activedeal->getProductId());

                Mage::unregister('product');
                Mage::register('product', $_product);
                Mage::register('current_product', $_product);

                $current_product_id = $_product->getId();
                $view_block = new Mage_Catalog_Block_Product_View();

                ?>

                <script type="text/javascript">
                    var optionsPrice = new Product.OptionsPrice(<?php echo $view_block ->getJsonConfig() ?>);
                </script>
                <div id="messages_product_view"></div>

                <?php
                $ajaxcart = themeOptions('ajaxcart');
                ?>

                <li class="item<?php if (++$_iterator == sizeof($_activedealsCollection)): ?> last<?php endif; ?> product-view">
                    <?php

                    ?>
                    <script>
                        var magicToolboxProductId = <?php echo $current_product_id; ?>;
                    </script>

                    <div class="product-essential">
                        <form action="<?php echo $this->getSubmitUrl($_product) ?>" method="post" id="product_addtocart_form"<?php if($_product->getOptions()): ?> enctype="multipart/form-data"<?php endif; ?>>
                            <div class="no-display">
                                <input type="hidden" name="product" value="<?php echo $_product->getId() ?>" />
                                <input type="hidden" name="related_product" id="related-products-field" value="" />
                            </div>
                            <div class="view-name">
                                <div class="product-name">
                                    <h1><?php echo $_helper->productAttribute($_product, $_product->getName(), 'name') ?></h1>
                                </div>
                            </div>
                            <div class="horizontal-image product-img-box">
                                <?php echo $this->getChildHtml('media') ?>
                            </div>
                            <div class="horizontal-shop product-shop">

                                <?php
                                    if ($_product->getTypeId() == 'simple'){
                                        echo $this->getLayout()->createBlock('catalog/product_view_type_simple')->setTemplate('catalog/product/view/type/default.phtml')->toHtml();
                                    }
                                    elseif ($_product->getTypeId() == 'configurable'){
                                        echo $this->getLayout()->createBlock('catalog/product_view_type_configurable')->setTemplate('catalog/product/view/type/default.phtml')->toHtml();
                                    }
                                ?>
                                <?php
                                    echo $this->getLayout()->createBlock('catalog/product_view')->setTemplate('catalog/product/view/tierprices.phtml')->toHtml();

                                    //echo $this->getLayout()->createBlock('cataloginventory/qtyincrements')->setTemplate('cataloginventory/qtyincrements.phtml')->toHtml();
                                    echo $this->getChildHtml('product.info.extrahint.qtyincrements');
                                ?>

                                <?php if ($_product->getShortDescription()):?>
                                    <div class="short-description">
                                        <h2><?php echo $this->__('Quick Overview') ?></h2>
                                        <div class="std"><?php echo $_helper->productAttribute($_product, nl2br($_product->getShortDescription()), 'short_description') ?></div>
                                    </div>
                                <?php endif;?>

                                <?php if (!$_product->getTypeInstance(true)->hasOptions($_product)):?>
                                    <div class="add-to-box">
                                        <?php if($_product->isSaleable()): ?>
                                            <?php
                                                echo $this->getLayout()->createBlock('catalog/product_view')->setTemplate('catalog/product/view/addtocart.phtml')->toHtml();
                                            ?>
                                        <?php endif; ?>
                                    </div>
                                    <?php echo $this->getChildHtml('extra_buttons') ?>
                                <?php endif; ?>
                                <?php if ($_product->isSaleable() && $_product->getTypeInstance(true)->hasOptions($_product)):?>
                                    <?php echo $this->getChildChildHtml('container2', '', true, true) ?>
                                <?php endif;?>

                                <?php if ($_product->isSaleable() && $_product->getTypeInstance(true)->hasOptions($_product)):?>
                                    <?php echo $this->getChildChildHtml('container1', '', true, true) ?>
                                <?php endif;?>

                            </div>



                            <div class="clearer"></div>

                        </form>
                    <script type="text/javascript">
                        //<![CDATA[
                        <?php if($ajaxcart == '1' || $ajaxcart == '2') { ?>
                        var productAddToCartForm = new VarienForm('product_addtocart_form');
                        productAddToCartForm.submit = function(button, url) {
                            if (this.validator.validate()) {
                                var form = this.form;
                                var oldUrl = form.action;
                                if (url) {
                                    form.action = url;
                                }
                                var e = null;
                                // Start of our new ajax code
                                if (!url) {
                                    url = jQuery('#product_addtocart_form').attr('action');
                                }
                                url = url.replace("checkout/cart","ajax/index"); // New Code
                                var data = jQuery('#product_addtocart_form').serialize();
                                data += '&isAjax=1';

                                jQuery('#ajax_loader').show();
                                try {
                                    jQuery.ajax( {
                                        url : url,
                                        dataType : 'json',
                                        type : 'post',
                                        data : data,

                                        success : function(data) {
                                            //alert("dd");
                                            jQuery('#ajax_loader').hide();
                                            if(data.status == 'ERROR'){
                                                alert(data.message);
                                            }else{
                                                successMessage(data.message);
                                                if(jQuery('.block-cart')){
                                                    jQuery('.block-cart').replaceWith(data.sidebar);
                                                }
                                                if(jQuery('.header .links')){
                                                    jQuery('.header .links').replaceWith(data.toplink);
                                                }
                                            }
                                        },
                                        error: function(jqXHR, textStatus, errorThrown) {
                                            alert("Error posting Data");
                                        }
                                    });
                                } catch (e) {
                                }
                                // End of our new ajax code
                                this.form.action = oldUrl;
                                if (e) {
                                    throw e;
                                }
                            }
                        }.bind(productAddToCartForm);

                        productAddToCartForm.submitLight = function(button, url){
                            if(this.validator) {
                                var nv = Validation.methods;
                                delete Validation.methods['required-entry'];
                                delete Validation.methods['validate-one-required'];
                                delete Validation.methods['validate-one-required-by-name'];
                                if (this.validator.validate()) {
                                    if (url) {
                                        this.form.action = url;
                                    }
                                    this.form.submit();
                                }
                                Object.extend(Validation.methods, nv);
                            }
                        }.bind(productAddToCartForm);

                        <?php } else { ?>

                        var productAddToCartForm = new VarienForm('product_addtocart_form');
                        productAddToCartForm.submit = function(button, url) {
                            if (this.validator.validate()) {
                                var form = this.form;
                                var oldUrl = form.action;

                                if (url) {
                                    form.action = url;
                                }
                                var e = null;
                                try {
                                    this.form.submit();
                                } catch (e) {
                                }
                                this.form.action = oldUrl;
                                if (e) {
                                    throw e;
                                }

                                if (button && button != 'undefined') {
                                    button.disabled = true;
                                }
                            }
                        }.bind(productAddToCartForm);

                        productAddToCartForm.submitLight = function(button, url){
                            if(this.validator) {
                                var nv = Validation.methods;
                                delete Validation.methods['required-entry'];
                                delete Validation.methods['validate-one-required'];
                                delete Validation.methods['validate-one-required-by-name'];
                                // Remove custom datetime validators
                                for (var methodName in Validation.methods) {
                                    if (methodName.match(/^validate-datetime-.*/i)) {
                                        delete Validation.methods[methodName];
                                    }
                                }

                                if (this.validator.validate()) {
                                    if (url) {
                                        this.form.action = url;
                                    }
                                    this.form.submit();
                                }
                                Object.extend(Validation.methods, nv);
                            }
                        }.bind(productAddToCartForm);

                        <?php } ?>
                        //]]>
                    </script>
                    </div>

                    <div class="hr"></div>

                </li>
            <?php endforeach; ?>
        </ol>
        <script type="text/javascript">decorateList('products-list', 'none-recursive')</script>

    </div>
<?php endif; ?>

